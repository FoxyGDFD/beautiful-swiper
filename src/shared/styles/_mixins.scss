@use "sass:list";
@use "sass:math";
@use "sass:map";
@use "@shared/styles/variables";

@mixin respond-to($breakpoint) {
  @if map.has-key(variables.$breakpoints, $breakpoint) {
    $value: map.get(variables.$breakpoints, $breakpoint);
    @media (min-width: $value) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint `#{$breakpoint}`";
  }
}

@mixin respond-to-max($breakpoint) {
  @if map.has-key(variables.$breakpoints, $breakpoint) {
    $value: map.get(variables.$breakpoints, $breakpoint);
    @media (max-width: $value - 0.02px) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint `#{$breakpoint}`";
  }
}

@mixin focus-ring {
  outline: 2px solid;
  outline-offset: 2px;
}

@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// source: https://github.com/selfishprimate/gerillass/blob/master/scss/library/_linear-gradient.scss
@mixin linear-gradient($attribute: 'background', $direction, $colors) {
  $list: ();
  @for $i from 1 through list.length($colors) {
    $list: list.append($list, list.nth($colors, $i), comma);
  }
  @if map.has-key(variables.$map-for-directions, $direction) {
    #{$attribute}: linear-gradient(
      map.get(variables.$map-for-directions, $direction),
      $list
    );
  } @else if not map.has-key(variables.$map-for-directions, $direction) {
    @if not list.index("deg", math.unit($direction)) {
      @error "#{$direction} is a wrong value for the $direction parameter. The value must be eighter a number followed by the 'deg' unit or one of the followings: #{map.keys($map-for-directions)}.";
    } @else {
        #{$attribute}: $gradient-value;
    }
  }
}